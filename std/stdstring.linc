#guard
#define STD_SIZE u64#
fn toLowerChar(ch: char)
    if +ch >= +'A' && +ch <= +'Z'
        as char (+ch + (+'a' - +'A'))
    else ch

fn toUpperChar(ch: char)
    if +ch >= +'a' && +ch <= +'z'
        as char (+ch + (+'A' - +'a'))
    else ch

fn toLower(str: string) {
    res: mut string;

    for ch in str res += toLowerChar(ch);
    res
}

fn toUpper(str: string) {
    res: mut string;

    for ch in str
        res += toUpperChar(ch);
    res
}

fn containsChar(str: string, ch: char): bool {
    for test in str
        if test == ch { return true; };
    false
}

fn isSpace(ch: char) containsChar(" \f\n\r\t\v", ch)
fn isPrint(ch: char) +ch >= +32 && +ch <= +126
fn isDigit(ch: char) +ch >= +'0' && +ch <= +'9'
fn isAlpha(ch: char) +ch >= +'A' && +ch <= +'z'
fn isAlnum(ch: char)
    isDigit(ch) || isAlpha(ch)

fn substr(str: string, start: STD_SIZE, end: STD_SIZE = -1u64) {
    res: mut string;
    for i: mut STD_SIZE = start; i <= end && i < +str; ++i
        res += str[i];
    res
}

fn lexicalCompare(first: string, second: string) {
    index mut := 0u64;
    while index < min<u64>(+first, +second) && first[index] == second [index] {++index;};
    if index < +first && index < +second {
        +first[index] > +second [index]
    }
    else index < +first
}